// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
// find the sum of the even-valued terms.

fn get_fib_evens_sum(upper_bound: usize) -> usize {
    let mut fibs: Vec<usize> = vec![1,1];  // initialize vec w/ first two elements as '1' for fib
    let mut sum: usize = 0;
    let mut x: usize = 1;

    while &fibs[x] <= &upper_bound {
        x = x + 1;
        fibs.push(fibs[x-1] + fibs[x-2]);  // add new element to end of vector
        
        if fibs[x] % 2 == 0 {
            sum = sum + fibs[x];
        }        
        println!("x is {}, fibs[x] is {}, sum is: {}", &x, &fibs[x], &sum);
    }
    sum
}
fn main() {
    const LIMIT: usize = 4_000_000; 
    println!("result is {}", get_fib_evens_sum(LIMIT));
}